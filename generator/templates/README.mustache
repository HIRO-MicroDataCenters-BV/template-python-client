# Python client generator for OpenAPI schema

## Requirements
Python 3.7+  
Docker engine. [Documentation](https://docs.docker.com/engine/install/)

## Usage
To generate the client, execute the following script
```bash
python ./generator/generate.py [--file <a path or URL to a .yaml file>] [--asyncio]
```

### Arguments:

**--file**  
Specifies the input OpenAPI specification file path or URL. This argument is required for generating the Python client. The input file can be either a local file path or a URL pointing to the OpenAPI schema.

**--asyncio**  
Flag to indicate whether to generate asynchronous code. If this flag is provided, the generated Python client will include asynchronous features. By default, synchronous code is generated.

### Saving Arguments:

The script saves provided arguments for future use. Upon the initial execution, if no arguments are provided, the script will check if there are previously saved arguments in the specified file path. If saved arguments are found, they will be loaded and used for generating the client. If no saved arguments are found or if new arguments are provided, the script will save the provided arguments for future use.

This mechanism ensures that users can omit specifying arguments on subsequent executions if the same arguments were used previously. Saved arguments are stored in a JSON file located at generator/args.json.

### Examples:
```bash
python ./generator/generate.py --file https://<domain>/openapi.json
python ./generator/generate.py --file https://<domain>/openapi.json --asyncio
python ./generator/generate.py --file /<path>/openapi.yaml
python ./generator/generate.py --file /<path>/openapi.yaml --asyncio
python ./generator/generate.py
```


# {{{projectName}}}
{{#appDescriptionWithNewLines}}
{{{.}}}
{{/appDescriptionWithNewLines}}

This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: {{appVersion}}
- Package version: {{packageVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}
{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Requirements

Python {{{generatorLanguageVersion}}}

## Installation & Usage

1. If you don't have `Poetry` installed run:

```bash
pip install poetry
```

2. Install dependencies:

```bash
poetry config virtualenvs.in-project true
poetry install --no-root
```

3. Running tests:

```bash
poetry run pytest
```

4. Building package:

```bash
poetry build
```

5. Publishing
```bash
poetry config pypi-token.pypi <pypi token>
poetry publish
```

## Release
A package is automatically built in GitHub Actions and pushed to https://pypi.org/ after pushing code/pr.

## GitHub Actions
GitHub Actions run tests, build and push a package to https://pypi.org/.

Setup secrets at `https://github.com/<workspace>/<project>/settings/secrets/actions`:
PYPI_TOKEN - An authentication token used to access PyPI for uploading, updating, or deleting Python packages.

https://docs.github.com/en/actions

You can run your GitHub Actions locally using https://github.com/nektos/act.  
Usage example:
```bash
act --secret-file my.secrets
```


## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

{{> common_README }}
